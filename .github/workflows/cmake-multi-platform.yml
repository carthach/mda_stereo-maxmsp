name: Multi-platform Max/MSP external for audio

on: push

# Can't have tilde as project name so this handles renaming
env: 
  EXTERNAL_NAME: mda_stereo~

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false
      
      matrix:
        os: [macos-latest, windows-latest]
        build_type: [Release]
        c_compiler: [clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: macos-latest
            c_compiler: clang
            cpp_compiler: clang
        exclude:
          - os: windows-latest
            c_compiler: clang          
          - os: macos-latest
            c_compiler: cl

    steps:
    - name: Checkout Max SDK
      uses: actions/checkout@v4
      with:
        repository: Cycling74/max-sdk
        submodules: 'true'
              
    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        path: source/audio/${{env.EXTERNAL_NAME}}
    
    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure CMake
      working-directory: source/audio/${{env.EXTERNAL_NAME}}
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        "-DCMAKE_OSX_ARCHITECTURES=x86_64;arm64"

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Copy other resources
      shell: bash
      run: |
        cp source/audio/${{env.EXTERNAL_NAME}}/${{env.EXTERNAL_NAME}}.maxhelp externals

    - uses: actions/upload-artifact@v3
      with:
        name: ${{env.EXTERNAL_NAME}}
        path: externals
        
  release:    
      runs-on: ubuntu-latest
      needs: build
      if: contains(github.ref, 'tags/v')
  
      steps:
      - name: Get Artifacts
        uses: actions/download-artifact@v3

      - name: Zip
        shell: bash
        run: |
          zip -r ${{env.EXTERNAL_NAME}}_${{github.ref_name}}.zip .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          prerelease: true          
          files: |
            ${{env.EXTERNAL_NAME}}_${{github.ref_name}}.zip